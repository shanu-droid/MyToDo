{"version":3,"sources":["todo-logo.png","App.js","reportWebVitals.js","index.js"],"names":["App","props","state","newItem","list","todoValue","id","Date","now","value","isDone","this","push","setState","updatelist","filter","item","input","src","logo","width","height","className","type","placeholder","required","onChange","e","updateInput","target","onClick","addItem","disabled","length","map","name","checked","deleteItem","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAAe,MAA0B,sC,eCmG1BA,E,kDA5FP,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,KAAM,IAJS,E,2CAQnB,SAAQC,GACN,GAAiB,KAAdA,EAAiB,CACjB,IAAMF,EAAU,CACdG,GAAIC,KAAKC,MACTC,MAAOJ,EACPK,QAAQ,GAEJN,EAAI,YAAOO,KAAKT,MAAME,MAC5BA,EAAKQ,KAAKT,GAEVQ,KAAKE,SAAS,CACZT,OACAD,QAAS,Q,wBAKhB,SAAWG,GACT,IACMQ,EADI,YAAOH,KAAKT,MAAME,MACJW,QAAO,SAAAC,GAAI,OAAIA,EAAKV,KAAOA,KACnDK,KAAKE,SAAS,CAACT,KAAMU,M,yBAIvB,SAAYG,GACVN,KAAKE,SAAS,CAACV,QAASc,M,oBAGzB,WAAS,IAAD,OACN,OACE,gCACI,qBAAMC,IAAOC,EAAMC,MAAQ,KAAKC,OAAS,KAAKC,UAAY,SAC1D,oBAAIA,UAAY,YAAhB,sBACA,sBAAKA,UAAU,YAAf,6BAEE,uBACA,uBACEC,KAAK,OACLD,UAAU,aACVE,YAAY,eACZC,UAAQ,EACRhB,MAAOE,KAAKT,MAAMC,QAClBuB,SAAU,SAAAC,GAAC,OAAI,EAAKC,YAAYD,EAAEE,OAAOpB,UAEzC,wBACAa,UAAU,UACVQ,QAAS,kBAAM,EAAKC,QAAQ,EAAK7B,MAAMC,UACvC6B,UAAWrB,KAAKT,MAAMC,QAAQ8B,OAH9B,sBAMA,qBAAKX,UAAU,OAAf,SACG,+BACCX,KAAKT,MAAME,KAAK8B,KAAI,SAAAlB,GACnB,OACE,+BACG,uBACAO,KAAK,WACLY,KAAK,SACLL,QAAQ,6BACRM,QAASpB,EAAKN,OACdgB,SAAU,eAETV,EAAKP,MACN,wBACAa,UAAU,MACVQ,QAAS,kBAAM,EAAKO,WAAWrB,EAAKV,KAFpC,sBATMU,EAAKV,OAgBf,+BACI,uBAAOiB,KAAK,aADhB,wBAGI,wBAAQD,UAAU,MAAlB,sC,GAnFbgB,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c1256981.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/todo-logo.00a94b5c.png\";","import React from 'react';\nimport logo from './todo-logo.png'\nimport './App.css'\n\n\nclass App extends React.Component {\n\n        constructor(props) {\n          super(props);\n          this.state = {\n            newItem: \"\",\n            list: []\n          }\n        }\n\n        addItem(todoValue){\n          if(todoValue !== \"\"){\n             const newItem = {\n               id: Date.now(),\n               value: todoValue,\n               isDone: false\n             };\n             const list = [...this.state.list]; //... use to store all the value present in list\n             list.push(newItem);\n\n             this.setState({\n               list, \n               newItem: \"\"\n             })\n          } \n        }\n\n        deleteItem(id){\n          const list = [...this.state.list];\n          const updatelist = list.filter(item => item.id !== id);\n          this.setState({list: updatelist});\n\n        }\n\n        updateInput(input){\n          this.setState({newItem: input})\n        }\n\n         render(){\n           return (\n             <div>\n                 <img  src = {logo} width = \"80\" height = \"80\" className = \"logo\"/>\n                 <h1 className = \"app-title\">ToDo App</h1>\n                 <div className=\"container\">\n                   Add An Item.....\n                   <br/>\n                   <input\n                     type=\"text\"\n                     className=\"input-text\"\n                     placeholder=\"Write a Todo\"\n                     required\n                     value={this.state.newItem}\n                     onChange={e => this.updateInput(e.target.value)}\n                     />\n                     <button\n                     className=\"add-btn\"\n                     onClick={() => this.addItem(this.state.newItem)} \n                     disabled={!this.state.newItem.length}\n                     >Add Todo\n                     </button>\n                     <div className=\"list\">\n                        <ul>\n                        {this.state.list.map(item => {\n                          return(\n                            <li key={item.id}>\n                               <input \n                               type=\"checkbox\"\n                               name=\"isDone\"\n                               onClick=\"this.checked=!this.checked\"\n                               checked={item.isDone}\n                               onChange={() => {}}\n                               />\n                               {item.value}\n                               <button\n                               className=\"btn\"\n                               onClick={() => this.deleteItem(item.id)}\n                               >Delete</button>\n                            </li>\n                          )\n                        })}\n                           <li>\n                               <input type=\"checkbox\"/>\n                                   Record youtube videos\n                               <button className=\"btn\">Delete</button>\n                           </li>\n                        </ul>\n                     </div>\n                 </div>\n             </div>\n           )\n         }\n}\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}